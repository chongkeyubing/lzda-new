<?xml version="1.0" encoding="UTF-8"?>
<!--
scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!-- 模块名称， 影响日志配置名，日志文件名 -->
    <property name="appName" value="lzda"/>
    <!--rootPath 日志路径，这里是相对路径，web项目eclipse下会输出到eclipse的安装目录下，如果部署到linux上的tomcat下，会输出到tomcat/bin目录 下 -->
    <property name="rootPath" value="/"/>
    <contextName>${appName}</contextName>

    <!--控制台输出 -->
    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <!--定义了一个过滤器,在LEVEL之下的日志输出不会被打印出来-->
        <!--这里定义了INFO，也就是控制台不会输出比INFO级别小的日志-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss}|%t|%p|%logger:%L|%m%n</pattern>
        </encoder>
    </appender>

    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 设置日志保存路径，注意如果 是web项目会保存到Tomcat的bin目录 下 -->
        <file>${rootPath}/${appName}/${appName}-log.log</file>
        <!-- 日志滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${rootPath}/${appName}/%d{yyyy-MM-dd_HH}.%i.log</fileNamePattern>
            <!-- 滚动周期30天 -->
            <maxHistory>30</maxHistory>
            <!-- 触发滚动的条件 -->
            <triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
                <!--日志文件达到10MB时触发滚动-->
                <maxFileSize>10MB</maxFileSize>
            </triggeringPolicy>
        </rollingPolicy>
        <!-- 日志输出的文件的格式  -->
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss}|%t|%p|%logger:%L|%m%n</pattern>
            <charset>UTF-8</charset>
        </encoder>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>INFO</level>
        </filter>
    </appender>


    <!--日志的输出级别由低到高（越来问题越严重）trace->debug->info->warn->error -->
    <!--root是rootLogger，logger会继承里面的appender-ref -->
    <root level="INFO">
        <!-- appender-ref标识这个appender将会添加到本应用的日志系统中 -->
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE"/>
    </root>

    <!-- 为某个包下的所有类的指定Appender ，继承root的appender -->
    <logger name="com.mwkj.lzda" level="INFO"></logger>
</configuration>
